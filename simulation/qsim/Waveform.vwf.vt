// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2023 05:33:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_mux4_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_mux4_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] input_e;
reg [1:0] input_sel;
// wires                                               
wire out;

// assign statements (if any)                          
modulo_mux4_1 i1 (
// port map - connection between master ports and signals/registers   
	.input_e(input_e),
	.input_sel(input_sel),
	.out(out)
);
initial 
begin 
#160000 $finish;
end 
// input_e[ 3 ]
initial
begin
	input_e[3] = 1'b1;
	input_e[3] = #10000 1'b0;
end 
// input_e[ 2 ]
initial
begin
	input_e[2] = 1'b0;
	input_e[2] = #10000 1'b1;
	input_e[2] = #10000 1'b0;
end 
// input_e[ 1 ]
initial
begin
	input_e[1] = 1'b0;
	input_e[1] = #20000 1'b1;
	input_e[1] = #10000 1'b0;
end 
// input_e[ 0 ]
initial
begin
	input_e[0] = 1'b0;
	input_e[0] = #30000 1'b1;
	input_e[0] = #10000 1'b0;
end 
// input_sel[ 1 ]
initial
begin
	input_sel[1] = 1'b0;
	input_sel[1] = #10000 1'b1;
	input_sel[1] = #20000 1'b0;
end 
// input_sel[ 0 ]
initial
begin
	input_sel[0] = 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
end 
endmodule

