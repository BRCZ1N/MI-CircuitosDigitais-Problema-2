// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2023 17:03:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_mux35_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_mux35_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [34:0] A;
reg [5:0] input_sel;
// wires                                               
wire out;

// assign statements (if any)                          
modulo_mux35_1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.input_sel(input_sel),
	.out(out)
);
initial 
begin 
#1000000 $stop;
end 
// A[ 34 ]
initial
begin
	A[34] = 1'b1;
	A[34] = #10000 1'b0;
end 
// A[ 33 ]
initial
begin
	A[33] = 1'b0;
	A[33] = #10000 1'b1;
	A[33] = #10000 1'b0;
end 
// A[ 32 ]
initial
begin
	A[32] = 1'b0;
	A[32] = #20000 1'b1;
	A[32] = #10000 1'b0;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
	A[31] = #30000 1'b1;
	A[31] = #10000 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
	A[30] = #40000 1'b1;
	A[30] = #10000 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
	A[29] = #50000 1'b1;
	A[29] = #10000 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
	A[28] = #60000 1'b1;
	A[28] = #10000 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
	A[27] = #70000 1'b1;
	A[27] = #10000 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
	A[26] = #80000 1'b1;
	A[26] = #10000 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
	A[25] = #90000 1'b1;
	A[25] = #10000 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
	A[24] = #100000 1'b1;
	A[24] = #10000 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
	A[23] = #110000 1'b1;
	A[23] = #10000 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
	A[22] = #120000 1'b1;
	A[22] = #10000 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
	A[21] = #130000 1'b1;
	A[21] = #10000 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
	A[20] = #140000 1'b1;
	A[20] = #10000 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
	A[19] = #150000 1'b1;
	A[19] = #10000 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
	A[18] = #160000 1'b1;
	A[18] = #10000 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
	A[17] = #170000 1'b1;
	A[17] = #10000 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
	A[16] = #180000 1'b1;
	A[16] = #10000 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
	A[15] = #190000 1'b1;
	A[15] = #10000 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
	A[14] = #200000 1'b1;
	A[14] = #10000 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
	A[13] = #210000 1'b1;
	A[13] = #10000 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #220000 1'b1;
	A[12] = #10000 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #230000 1'b1;
	A[11] = #10000 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #240000 1'b1;
	A[10] = #10000 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #250000 1'b1;
	A[9] = #10000 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #260000 1'b1;
	A[8] = #10000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #270000 1'b1;
	A[7] = #10000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #280000 1'b1;
	A[6] = #10000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #290000 1'b1;
	A[5] = #10000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #300000 1'b1;
	A[4] = #10000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #310000 1'b1;
	A[3] = #10000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #320000 1'b1;
	A[2] = #10000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #330000 1'b1;
	A[1] = #10000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #90000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #240000 1'b1;
	A[0] = #10000 1'b0;
end 
// input_sel[ 5 ]
initial
begin
	input_sel[5] = 1'b0;
	input_sel[5] = #320000 1'b1;
	input_sel[5] = #320000 1'b0;
	input_sel[5] = #320000 1'b1;
end 
// input_sel[ 4 ]
initial
begin
	repeat(3)
	begin
		input_sel[4] = 1'b0;
		input_sel[4] = #160000 1'b1;
		# 160000;
	end
	input_sel[4] = 1'b0;
end 
// input_sel[ 3 ]
initial
begin
	repeat(6)
	begin
		input_sel[3] = 1'b0;
		input_sel[3] = #80000 1'b1;
		# 80000;
	end
	input_sel[3] = 1'b0;
end 
// input_sel[ 2 ]
initial
begin
	repeat(12)
	begin
		input_sel[2] = 1'b0;
		input_sel[2] = #40000 1'b1;
		# 40000;
	end
	input_sel[2] = 1'b0;
end 
// input_sel[ 1 ]
always
begin
	input_sel[1] = 1'b0;
	input_sel[1] = #20000 1'b1;
	#20000;
end 
// input_sel[ 0 ]
always
begin
	input_sel[0] = 1'b0;
	input_sel[0] = #10000 1'b1;
	#10000;
end 
endmodule

