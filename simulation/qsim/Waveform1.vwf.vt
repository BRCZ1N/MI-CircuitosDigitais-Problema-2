// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/30/2023 04:21:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_mux16_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_mux16_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] input_e;
reg [3:0] input_sel;
// wires                                               
wire out;

// assign statements (if any)                          
modulo_mux16_1 i1 (
// port map - connection between master ports and signals/registers   
	.input_e(input_e),
	.input_sel(input_sel),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 
// input_e[ 15 ]
initial
begin
	input_e[15] = 1'b1;
	input_e[15] = #10000 1'b0;
end 
// input_e[ 14 ]
initial
begin
	input_e[14] = 1'b0;
	input_e[14] = #10000 1'b1;
	input_e[14] = #10000 1'b0;
end 
// input_e[ 13 ]
initial
begin
	input_e[13] = 1'b0;
	input_e[13] = #20000 1'b1;
	input_e[13] = #10000 1'b0;
end 
// input_e[ 12 ]
initial
begin
	input_e[12] = 1'b0;
	input_e[12] = #30000 1'b1;
	input_e[12] = #10000 1'b0;
end 
// input_e[ 11 ]
initial
begin
	input_e[11] = 1'b0;
	input_e[11] = #40000 1'b1;
	input_e[11] = #10000 1'b0;
end 
// input_e[ 10 ]
initial
begin
	input_e[10] = 1'b0;
	input_e[10] = #50000 1'b1;
	input_e[10] = #10000 1'b0;
end 
// input_e[ 9 ]
initial
begin
	input_e[9] = 1'b0;
	input_e[9] = #60000 1'b1;
	input_e[9] = #10000 1'b0;
end 
// input_e[ 8 ]
initial
begin
	input_e[8] = 1'b0;
	input_e[8] = #70000 1'b1;
	input_e[8] = #10000 1'b0;
end 
// input_e[ 7 ]
initial
begin
	input_e[7] = 1'b0;
	input_e[7] = #80000 1'b1;
	input_e[7] = #10000 1'b0;
end 
// input_e[ 6 ]
initial
begin
	input_e[6] = 1'b0;
	input_e[6] = #90000 1'b1;
	input_e[6] = #10000 1'b0;
end 
// input_e[ 5 ]
initial
begin
	input_e[5] = 1'b0;
	input_e[5] = #100000 1'b1;
	input_e[5] = #10000 1'b0;
end 
// input_e[ 4 ]
initial
begin
	input_e[4] = 1'b0;
	input_e[4] = #110000 1'b1;
	input_e[4] = #10000 1'b0;
end 
// input_e[ 3 ]
initial
begin
	input_e[3] = 1'b0;
	input_e[3] = #120000 1'b1;
	input_e[3] = #10000 1'b0;
end 
// input_e[ 2 ]
initial
begin
	input_e[2] = 1'b0;
	input_e[2] = #130000 1'b1;
	input_e[2] = #10000 1'b0;
end 
// input_e[ 1 ]
initial
begin
	input_e[1] = 1'b0;
	input_e[1] = #140000 1'b1;
	input_e[1] = #10000 1'b0;
end 
// input_e[ 0 ]
initial
begin
	input_e[0] = 1'b0;
	input_e[0] = #150000 1'b1;
	input_e[0] = #10000 1'b0;
end 
// input_sel[ 3 ]
initial
begin
	input_sel[3] = 1'b0;
	input_sel[3] = #80000 1'b1;
	input_sel[3] = #80000 1'b0;
end 
// input_sel[ 2 ]
initial
begin
	input_sel[2] = 1'b0;
	input_sel[2] = #40000 1'b1;
	input_sel[2] = #40000 1'b0;
	input_sel[2] = #40000 1'b1;
	input_sel[2] = #40000 1'b0;
end 
// input_sel[ 1 ]
initial
begin
	input_sel[1] = 1'b0;
	input_sel[1] = #20000 1'b1;
	input_sel[1] = #20000 1'b0;
	input_sel[1] = #20000 1'b1;
	input_sel[1] = #20000 1'b0;
	input_sel[1] = #20000 1'b1;
	input_sel[1] = #20000 1'b0;
	input_sel[1] = #20000 1'b1;
	input_sel[1] = #20000 1'b0;
end 
// input_sel[ 0 ]
initial
begin
	input_sel[0] = 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
	input_sel[0] = #10000 1'b1;
	input_sel[0] = #10000 1'b0;
end 
endmodule

