// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2023 05:15:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pbl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pbl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_confirmation;
reg button_count;
reg clk;
reg [1:0] hh1;
reg [1:0] hh2;
// wires                                               
wire [4:0] m_col;
wire [6:0] m_line;
wire [7:0] out_7seg;
wire [3:0] out_7seg_ac;
wire [1:0] rgb_output;

// assign statements (if any)                          
pbl i1 (
// port map - connection between master ports and signals/registers   
	.button_confirmation(button_confirmation),
	.button_count(button_count),
	.clk(clk),
	.hh1(hh1),
	.hh2(hh2),
	.m_col(m_col),
	.m_line(m_line),
	.out_7seg(out_7seg),
	.out_7seg_ac(out_7seg_ac),
	.rgb_output(rgb_output)
);
initial 
begin 
#1000000 $finish;
end 

// button_confirmation
initial
begin
	button_confirmation = 1'b1;
	button_confirmation = #10000 1'b0;
	button_confirmation = #20000 1'b1;
end 

// button_count
initial
begin
	button_count = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// hh1[ 1 ]
initial
begin
	hh1[1] = 1'b1;
	hh1[1] = #750000 1'b0;
end 
// hh1[ 0 ]
initial
begin
	hh1[0] = 1'b0;
end 
// hh2[ 1 ]
initial
begin
	hh2[1] = 1'b0;
end 
// hh2[ 0 ]
initial
begin
	hh2[0] = 1'b0;
end 
endmodule

