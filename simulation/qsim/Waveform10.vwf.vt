// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2023 04:31:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_seletor_1_4_at
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_seletor_1_4_at_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] mdc;
reg [2:0] mdl;
// wires                                               
wire [1:0] dmx4_sel;

// assign statements (if any)                          
modulo_seletor_1_4_at i1 (
// port map - connection between master ports and signals/registers   
	.dmx4_sel(dmx4_sel),
	.mdc(mdc),
	.mdl(mdl)
);
initial 
begin 
#1000000 $finish;
end 
// mdc[ 2 ]
initial
begin
	mdc[2] = 1'b0;
	mdc[2] = #320000 1'b1;
	mdc[2] = #320000 1'b0;
	mdc[2] = #320000 1'b1;
end 
// mdc[ 1 ]
initial
begin
	repeat(3)
	begin
		mdc[1] = 1'b0;
		mdc[1] = #160000 1'b1;
		# 160000;
	end
	mdc[1] = 1'b0;
end 
// mdc[ 0 ]
initial
begin
	repeat(6)
	begin
		mdc[0] = 1'b0;
		mdc[0] = #80000 1'b1;
		# 80000;
	end
	mdc[0] = 1'b0;
end 
// mdl[ 2 ]
initial
begin
	repeat(12)
	begin
		mdl[2] = 1'b0;
		mdl[2] = #40000 1'b1;
		# 40000;
	end
	mdl[2] = 1'b0;
end 
// mdl[ 1 ]
always
begin
	mdl[1] = 1'b0;
	mdl[1] = #20000 1'b1;
	#20000;
end 
// mdl[ 0 ]
always
begin
	mdl[0] = 1'b0;
	mdl[0] = #10000 1'b1;
	#10000;
end 
endmodule

